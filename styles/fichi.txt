def switch_page(self, index):
    """Переключение страниц с анимацией слева направо."""
    if self.isAnimating or index == self.ui.stackedWidget.currentIndex():
        return  # Если анимация уже выполняется или нажата та же кнопка, ничего не делаем

    self.isAnimating = True  # Устанавливаем флаг анимации

    current_widget = self.ui.stackedWidget.currentWidget()
    next_widget = self.ui.stackedWidget.widget(index)

    # Устанавливаем начальные параметры для следующего виджета
    next_widget.setGeometry(current_widget.geometry())  # Совпадение геометрии текущего виджета
    next_widget.show()  # Показываем следующий виджет

    # Анимация для текущего виджета (выход вправо)
    self.animation_out = QtCore.QPropertyAnimation(current_widget, b"geometry")
    self.animation_out.setDuration(500)
    self.animation_out.setStartValue(current_widget.geometry())
    self.animation_out.setEndValue(QtCore.QRect(
        current_widget.x() + current_widget.width(),  # Двигаем вправо
        current_widget.y(),
        current_widget.width(),
        current_widget.height()
    ))

    # Анимация для следующего виджета (вход слева)
    self.animation_in = QtCore.QPropertyAnimation(next_widget, b"geometry")
    self.animation_in.setDuration(500)
    self.animation_in.setStartValue(QtCore.QRect(
        next_widget.x() - next_widget.width(),  # Начальная позиция слева
        next_widget.y(),
        next_widget.width(),
        next_widget.height()
    ))
    self.animation_in.setEndValue(current_widget.geometry())  # Конечная позиция

    # Устанавливаем эффект ease in-out
    self.animation_out.setEasingCurve(QtCore.QEasingCurve.Type.InOutCirc)
    self.animation_in.setEasingCurve(QtCore.QEasingCurve.Type.InOutCirc)

    # Переключение страниц после завершения анимации выхода
    self.animation_out.finished.connect(lambda: self.finalize_switch_page(index, current_widget))

    # Запуск анимаций
    self.animation_out.start()
    self.animation_in.start()


def _start_minecraft(self):
    try:
        # Получаем имя пользователя из поля ввода
        username = self.ui.username_lineEdit.text().strip()
        if not username:
            username = "Player"  # Значение по умолчанию

        # Путь к стандартной папке Minecraft в %appdata%
        game_dir = os.path.join(os.getenv('APPDATA'), ".CmLauncher")

        print(f"Игра будет установлена в: {game_dir}")

        # Определяем callback для отслеживания статуса
        callback_dict = minecraft_launcher_lib.install.CallbackDict(
            setStatus=self.set_status,
        )

        # Установка Fabric
        minecraft_launcher_lib.fabric.install_fabric(self.minecraft_version, game_dir, callback=callback_dict)

        # Получение команды для запуска Minecraft в оффлайн-режиме
        options = {
            "username": username,
            "launcherName": "CmLauncher",
            "gameDirectory": game_dir
        }

        minecraft_command = minecraft_launcher_lib.command.get_minecraft_command(self.minecraft_version, game_dir, options)

        # Запуск Minecraft
        print("Запуск Minecraft с командой:", ' '.join(minecraft_command))  # Для отладки
        subprocess.run(minecraft_command)

    except Exception as e:
        print(f"Ошибка запуска Minecraft: {e}")
        self.set_status(f"Ошибка запуска: {e}")  # Обновление статуса на UI